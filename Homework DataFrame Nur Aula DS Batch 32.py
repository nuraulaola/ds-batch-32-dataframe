# -*- coding: utf-8 -*-
"""Nur Aula_Homework DataFrame.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aVnnazfPC1EIGDRigW-2X7mlLYpPRJgE
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df_customers = pd.read_csv("/content/drive/MyDrive/Dataset/customers.csv")
df_customers

df_orders = pd.read_csv("/content/drive/MyDrive/Dataset/orders.csv")
df_orders

df_order_details = pd.read_csv("/content/drive/MyDrive/Dataset/orderdetails.csv")
df_order_details

df_orders.isnull().sum()

df_customers.isnull().sum()

df_order_details.isnull().sum()

"""### 1. Lakukan outer join pada table orders & table customers dengan menggunakan fungsi merge. Tampilkan hanya kolom orderNumber, customerNumber, dan customerName. [Score:20]"""

# Menggabungkan DataFrame df_orders dan df_customers berdasarkan kolom 'customerNumber'
df = pd.merge(df_orders,
              df_customers,
              how='outer',
              on=['customerNumber'])

# Pilih kolom 'orderNumber', 'customerNumber', dan 'customerName' dari hasil gabungan
df[['orderNumber', 'customerNumber', 'customerName']]

"""### 2. Tampilkan top 10 customer dengan jumlah order terbanyak (bukan nominal terbanyak). Tampilkan customerName beserta dengan jumlah ordernya. [Score: 30]"""

def top_10_customers_with_most_orders(df_orders, df_customers, df_order_details):
    # Menggabungkan dataframes berdasarkan customerNumber dan orderNumber
    merged_df = pd.merge(df_orders, df_customers, on='customerNumber')
    merged_df = pd.merge(merged_df, df_order_details, on='orderNumber')

    # Menghitung jumlah order untuk setiap customer
    customer_order_count = merged_df['customerNumber'].value_counts().reset_index()
    customer_order_count.columns = ['customerNumber', 'orderCount']

    # Menggabungkan dengan DataFrame customer untuk mendapatkan nama customer
    top_customers = pd.merge(customer_order_count, df_customers[['customerNumber', 'customerName']], on='customerNumber')

    # Mengurutkan dan mengambil top 10 customer
    top_10_customers = top_customers.sort_values(by='orderCount', ascending=False).head(10)

    return top_10_customers[['customerName', 'orderCount']]

result = top_10_customers_with_most_orders(df_orders, df_customers, df_order_details)
print(result)

"""### 3.Tampilkan max totalAmount, mean totalAmount, count orderNumber untuk setiap negara. Tampilkan terurut descending berdasarkan mean totalAmount. (Hint: merge table orders, orderdetails, dan customers) [Score: 50]"""

# Menggabungkan data dari beberapa DataFrame berdasarkan kolom yang ditentukan
merged_data = pd.merge(pd.merge(df_orders, df_customers, on=['customerNumber'], how='outer'), df_order_details, on=['orderNumber'], how='outer')

# Buat salinan data gabungan untuk manipulasi lebih lanjut
filtered_data = merged_data.copy()

# Isi nilai NaN dalam kolom 'country' dengan 'Unknown'
filtered_data['country'] = filtered_data['country'].fillna('Unknown')

# Hitung 'totalAmount' dengan mengalikan 'quantityOrdered' dan 'priceEach'
filtered_data['totalAmount'] = filtered_data['quantityOrdered'] * filtered_data['priceEach']

# Buat DataFrame dengan negara-negara unik dari data yang digabungkan
all_countries = pd.DataFrame({'country': merged_data['country'].unique()})

# Gabungkan DataFrame negara-negara unik dengan data yang difilter
merged_data_final = pd.merge(all_countries, filtered_data, how='left', on='country')

# Buat tabel ringkasan menggunakan pivot_table
summary_table = pd.pivot_table(
    data=merged_data_final,
    index='country',
    values=['totalAmount', 'orderNumber'],
    aggfunc={'totalAmount': ['max', 'mean', 'sum'], 'orderNumber': 'count'},
    fill_value=0
)

# Urutkan tabel ringkasan berdasarkan mean dari 'totalAmount' secara menurun
summary_table = summary_table.sort_values(('totalAmount', 'mean'), ascending=False)

summary_table